#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<assert.h>
#include<pthread.h>
#include<unistd.h>
#include<complex.h>

#define SIZE 10
#define PI 3.14159265358979323846

struct cpl_root {
  double complex number;
  int root;
  int num_of_ite;
};

double complex pow_cpx(double complex a, int d){
  double complex a_tmp=a;
  for (size_t i = 1; i < d; i++) {
    a=a*a_tmp;
  }
  return a;
}
double complex newton_raphson_iteration(double complex startpoint,int d){
  double complex numerator1, numerator2,denominator,help,final_numerator, nextpoint;
  numerator1 = pow_cpx(startpoint,d);
  complex double unity = 1 + 0*I;
  numerator1=numerator1-unity;
  help = pow_cpx(startpoint,d-1);
  numerator2=conj(help);
  denominator=numerator2*help;
  final_numerator = numerator1*numerator2;
  __real__ final_numerator = creal(final_numerator)/(creal(denominator)*d);
  __imag__ final_numerator = cimag(final_numerator)/(creal(denominator)*d);
  nextpoint = startpoint - final_numerator;

  return nextpoint;



}

struct cpl_root newton_raphson_method(struct cpl_root start_point,int degree,double complex * roots , int num_ite){

  double complex start = start_point.number;
  double complex unity = 1+0*I;
  double complex test;
  for (size_t i = 0; i < num_ite; i++) {
    start = newton_raphson_iteration(start,degree);
    test = pow_cpx(start,degree)-unity;
      test = test*conj(test);
      double test2 =(double) creal(test);
      double test3 =(double) cimag(test);
      test2 = abs(test2);
      test3 = abs(test3);
      double test4 = cabs(test4);

    if ((test2 > 10000000000) || (test3 >10000000000)){
      printf("FAIL");
      start_point.root = 100;
      start_point.num_of_ite=i;
      break;
    } else if (test4<0.001) {

      for (size_t k = 0; k < degree; k++) {
        if (cabs(start-roots[k]) < 0.001){
          start_point.root = k;
          start_point.num_of_ite=i;
          start_point.number = start;
          return start_point;
        }
      }

    }

    }

    start_point.num_of_ite=1000000;
    start_point.root = 100000;
    return start_point;


}

struct cpl_root ** generateStartspace(){
  struct cpl_root * asentries = (struct cpl_root*) malloc(sizeof(struct cpl_root) * SIZE*SIZE);
  struct cpl_root ** start_space = (struct cpl_root**) malloc(sizeof(struct cpl_root*) * SIZE);

  for ( size_t ix = 0, jx = 0; ix < SIZE; ++ix, jx+=SIZE ){
  start_space[ix] = asentries + jx;
}

for ( int ix = 0; ix < SIZE; ++ix ){
  for ( int jx = 0; jx < SIZE; ++jx ){
    double test4 =(double) (4*jx)/(SIZE-1);
    double test5 =(double) (4*ix)/(SIZE-1);
  __real__ (start_space[ix][jx].number) =(double)-2+test4;
  __imag__ (start_space[ix][jx].number) =(double)-2+test5;
  }
}
return start_space;
}



double complex * generateRoots(int degree){
  double complex * roots = (double complex*) malloc(sizeof(double complex)*degree);
  for (int ix = 0; ix < degree; ix++) {
    __real__ roots[ix] = cos(ix*2*PI/(degree));
    __imag__ roots[ix] = sin(ix*2*PI/(degree));
  }
  return roots;
}





int main(int argc,char * argv[]){
  if (argc < 4) {
    printf("Wrong number of arguments\n");
    return 0;
  }

  if (argv[1][0] == '-' && argv[1][1] == 't') {
    numb_threads = strtol((argv[1]+2),NULL,10);
  }



  if (argv[2][0] == '-' && argv[2][1] == 'l'){
    numb_pixel = strtol((argv[2]+2),NULL,10);
  }


  deg = strtol(argv[3],NULL,10);
    int deg=6;
    struct cpl_root **  start_space = generateStartspace();
    double complex * roots = generateRoots(deg);

  for (size_t i = 0; i < SIZE; i++) {
    for (size_t j = 0; j < SIZE; j++) {
     start_space[i][j] =newton_raphson_method(start_space[i][j],deg,roots,200);

    }
  }
  //  printf("%f + %fi\n",creal(start_space[i][j].number),cimag(start_space[i][j].number));
  // printf("Konvergerar till: %f + %fi klassificeras med %d pÃ¥ antalet iterationer %d\n",creal(start_space[i][j].number),cimag(start_space[i][j].number),start_space[i][j].root,start_space[i][j].num_of_ite);
  // struct cpl_root test =newton_raphson_method(start,deg,10);
  // printf("%d + %di",creal(start_space[2][100].number),cimag(start_space[2][100].number));
  return 0;
}
